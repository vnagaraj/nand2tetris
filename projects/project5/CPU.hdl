// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //decode MSB of instruction to distinguish A instruction from C instruction
    Mux16(a=instruction, b=alu, sel=instruction[15], out=w1);
    Not(in=instruction[15], out=notA);
    Or(a=notA, b=instruction[5], out=loadA);
    //store result in register A/C
    ARegister(in=w1, load=loadA, out=areg);
    StripMSB(in=areg, out=addressM);
    // choice between using a or m register using "a" bit
    Mux16(a=areg, b=inM, sel=instruction[12], out=amreg);
    // using destination bit instruction[3] to check if result to be stored in register M
    And(a=instruction[15], b=instruction[3], out=result);
    Or(a=result, b=false, out=writeM);
    //store result of alu in dreg using destination bit instruction[4] to check if result to be stored in register D
    And(a=instruction[15], b=instruction[4], out=loadd);
    DRegister(in=alu, load=loadd, out=dreg);
    ALU(x=dreg, y=amreg , zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out= alu, out=outM, zr=zr, ng=ng);
    //jump bits calculation
    And(a=zr, b=instruction[1], out=w3);
    And(a=ng, b=instruction[2], out=w4);
    Or(a=w3, b=w4, out=w3w4);
    Or(a=zr, b=ng, out=zrng);
    Not(in=zrng, out=notzrng);
    And(a=notzrng, b=instruction[0], out=notzrnginst0);
    Or(a=w3w4, b=notzrnginst0, out=w3w4notzrnginst0);
    //to discard incase of A-instruction
    And(a=w3w4notzrnginst0, b=instruction[15], out=load);
    //end of jump bits calculation
    //to alternate between use of load/inc
    Not(in=load, out=inc);
    PC(in=areg, inc=inc, load=load, reset=reset, out=out16);
    StripMSB(in=out16, out=pc);
}
